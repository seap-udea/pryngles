##################################################################
#                                                                #
#.#####...#####...##..##..##..##...####...##......######...####..#
#.##..##..##..##...####...###.##..##......##......##......##.....#
#.#####...#####.....##....##.###..##.###..##......####.....####..#
#.##......##..##....##....##..##..##..##..##......##..........##.#
#.##......##..##....##....##..##...####...######..######...####..#
#................................................................#
#                                                                #
# PlanetaRY spanGLES                                             #
#                                                                #
##################################################################
# License http://github.com/seap-udea/pryngles-public            #
##################################################################
#!/usr/bin/env python
# coding: utf-8

# # Pryngles module: legacy

# ## External modules


# ### Constants



# ### Util Class


# ### Configuration


# ### Sampling class


# ### Ringed Planet Class


RingedPlanet.__doc__=RingedPlanet_doc

"""
import time
nspangles=1000

sys_test = System()
s=sys_test.add(kind="Star",physics=dict(radius=Consts.rsun/sys_test.ul),optics=dict(limb_coeffs=[0.65]))
p=sys_test.add(kind="Planet", primary=s,
               orbit=dict(a=3, e=0.0),
               physics=dict(radius=Consts.rsaturn/sys_test.ul),
               optics=dict(nspangles=nspangles))
r=sys_test.add(kind="Ring", primary=p,
               physics=dict(fi=1.5, fe=2.25, i=30*Consts.deg,roll=90*Consts.deg),
               optics=dict(nspangles=nspangles))
#RP_test=sys_test.ensamble_system(extension="pixx")
RP_test=sys_test.ensamble_system(extension="cpixx")

#Change observer
RP_test.changeObserver([-90*Consts.deg,60*Consts.deg])

# Star apparant size
thetas=RP_test.thetas
lamb_initial=90*Consts.deg
lamb_final=450*Consts.deg
lambs=np.linspace(lamb_initial,lamb_final,181)

# New
Rps_test=[]
Rrs_test=[]
Pp = []
Pr = []
Ptot=[]
Qr=[]
Qp=[]
Qtot=[]
Ur=[]
Up=[]
Utot=[]
alpha=[]
ts_test=[]
Tp_test = []
Tr_test = []
T_test = []

# Save data
save_array = np.zeros((6,181))

# Plot data
cmaxo = 1
cmino = 1e-6

# Old
Rps=[]
Rrs=[]
ts=[]

ii = 0

Verbose.VERBOSITY=VERB_DEEP
reflec_time = []
for lamb in tqdm.tqdm(lambs):
    st = time.time()
    RP_test.changeStellarPosition(lamb)
    ts_test+=[RP_test.t*RP_test.CU.UT]
    verbose(VERB_DEEP,"True anomaly: ", lamb/Consts.deg)
    RP_test.updateOpticalFactors()
    et = time.time()
    verbose(VERB_DEEP,"Time geometry takes: ", et - st)
    
    st = time.time()
    RP_test.updateReflection()
    et = time.time()
    reflec_time += [et-st]
    verbose(VERB_DEEP,"Time reflection takes: ", et - st)
    
    Rps_test+=[RP_test.Rip.sum()]
    Rrs_test+=[RP_test.Rir.sum()]
    Pp += [RP_test.Ptotp]
    Pr += [RP_test.Ptotr]
    Ptot+=[RP_test.Ptot]
    Qr+=[RP_test.Stotr[1]]
    Qp+=[RP_test.Stotp[1]]
    Qtot+=[RP_test.Stot[1]]
    Ur+=[RP_test.Stotr[2]]
    Up+=[RP_test.Stotp[2]]
    Utot+=[RP_test.Stot[2]]
    alpha+=[np.arccos(RP_test.alphaps)*180/np.pi]
    break
Verbose.VERBOSITY=VERB_NONE
#""";

"""
VERB4::<module>:: True anomaly:  90.0
VERB4::<module>:: Time geometry takes:  0.10533761978149414
VERB4::updateReflection:: Ftot planet:  0.07176569953419971 ,  Ptot planet:  0.09531410094354388
VERB4::updateReflection:: Ftot ring:  0.13266560336528327 ,  Ptot ring:  0.04918156751904324
VERB4::<module>:: Time reflection takes:  0.032594919204711914
""";


# ## Draw pryngles logo

Plot.draw_pryngles=draw_pryngles

# ### Test

