
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    # Tested methods from module file sampler
    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    def plot(self, spangled=dict(), **args):
        """
        Plot sample.
    
        Parameters:
            args: scatter plotting options, dictionary.
        """
        sargs= dict(c='k', s=1.5)
        sargs.update(args)
        
        #Spangles options
        if spangled:
            defaults = dict(alpha=0.3)
            defaults.update(spangled)
        
        if self.dim == 2:            
            self.fig,self.ax = plt.subplots()
            self.ax.scatter(self.ss[:,0], self.ss[:,1], **sargs)
            self.ax.add_patch( plt.Circle((0,0), 1, **self.cargs))
            self.ax.set_aspect("equal")
            if spangled:
                for isp in range(self.N):
                    c = Circle(self.ss[isp], self.deff/2, **defaults)
                    self.ax.add_patch(c)
                    
        else:
            self.fig = plt.figure()
            self.ax = self.fig.add_subplot(111, projection='3d')
            self.ax.scatter(self.ss[:,0], self.ss[:,1], self.ss[:,2], **sargs)
            u,v = np.mgrid[0:2*np.pi:20j,0:np.pi:10j]
            x = np.cos(u)*np.sin(v)
            y = np.sin(u)*np.sin(v)
            z = np.cos(v)
            self.ax.plot_wireframe(x, y, z, **self.wargs)
            
            if spangled:
                for isp in range(self.N):
                    Plot.circle3d(self.ax, self.ss[isp], self.deff/2, zDir=self.ss[isp], **defaults)
            
            self.ax.set_box_aspect([1 ,1 , 1])
            
        self.fig.tight_layout()
    
    
    def gen_circle(self, perturbation=1, boundary=2):
        """ Sample points in fibonacci spiral on the unit circle
    
        Optional parameters:
    
            perturbation: type of perturbation (0 normal perturbation, 1 random perturbation), int
    
            boundary: type of boundary (0 jagged, >1 smooth)
    
        Update:
            ss, pp
        """
        self._seed_sampler()
        self.geometry = SAMPLER_GEOMETRY_CIRCLE
        
        #Unitary radius
        self.R = 1
        self.ri = 0 # For compatibility with ring
    
        #Total area
        self.A = np.pi*self.R**2
            
        shift = 1.0 if perturbation == 0 else self.N*np.random.random()
    
        ga = np.pi * (3.0-np.sqrt(5.0))
    
        # Boundary points
        np_boundary = round(boundary*np.sqrt(self.N))
    
        self.dim = 2
        self.ss = np.zeros((self.N,3))
        self.pp = np.zeros((self.N,3))
        self.ns = np.zeros((self.N,3))
        j = 0
        for i in range(self.N):
            if i > self.N - (np_boundary+1):
                r = 1.0
            else:
                r = np.sqrt((i+0.5) / (self.N - 0.5 * (np_boundary+1)))
            phi   = ga * (i+shift)
            self.ss[j,:] = np.array([r*np.cos(phi), r*np.sin(phi), 0])
            self.ns[j,:] = np.array([0,0,1])
            self.pp[j,:] = np.array([r, np.mod(phi, 2*np.pi), 0])
            j += 1
    
        #Distances
        self._calc_distances()
    
    def _cut_hole(self, ri=0):
        """
        Cut a hole in the data (this applies to circle sampling)
        """
        #Purge points
        cond =~ ((self.pp[:,1]>0) & (self.pp[:,0]<=ri))
        self.pp = self.pp[cond]
        self.ss = self.ss[cond]
        self.ns = self.ns[cond]
        self.N = len(self.pp)
        
        #Correct area
        self.A = self.A - np.pi*ri**2
        self.ri = ri
        
        #Distances
        self._calc_distances()
    
    def gen_ring(self, ri=0.5, perturbation=1, boundary=2):
        """ Sample points in fibonacci spiral on the unit circle, but including an inner gap (as in ring)
    
        Parameters:
            fi: float, default = 0.5:
                Inner radius of the ring.
    
        Optional parameters:
            perturbation: type of perturbation (0 normal perturbation, 1 random perturbation), int
            boundary: type of boundary (0 jagged, >1 smooth)
    
        Example:
            s.Sample(1000)
            s.gen_fullring(0.3)
    
        Update:
            ss, pp
        """
        if self.N < SAMPLER_MIN_RING:
            raise ValueError(f"The number of points for a ring shouldn't be lower than {SAMPLER_MIN_RING}.  You provided {self.N}")
    
        if ri >=1 :
            raise ValueError(f"The radius of the inner ring should be less than 1 (r ={ri} provided)")
            
        #Compute effective number
        self.N = int(self.N / (1-ri**2))
        self.gen_circle(perturbation,boundary)
        
        #Cut hole
        self._cut_hole(ri)
    
    def gen_sphere(self, perturbation=1):
        """ Sample points in the unit sphere following fibonacci spiral
    
        Optional parameters:
            perturbation: type of perturbation (0 normal perturbation, 1 random perturbation), int
    
        Update:
            ss, pp
        """
        self._seed_sampler()
        self.geometry = SAMPLER_GEOMETRY_SPHERE
    
        #Unitary radius
        self.R = 1
    
        #Total area of the Sample
        self.A = 4*np.pi*self.R**2
    
        shift = 1.0 if perturbation == 0 else self.N*np.random.random()
    
        ga = np.pi * (3.0-np.sqrt(5.0))
        offset = 2.0/self.N
    
        self.dim = 3
        self.ss = np.zeros((self.N,self.dim))
        self.pp = np.zeros((self.N,self.dim))
        self.ns = np.zeros((self.N,self.dim))
        j = 0
        for i in range(self.N):
            phi   = ga * ((i+shift) % self.N)
            cos_phi = np.cos(phi)
            sin_phi = np.sin(phi)
            cos_theta = ((i+0.5) * offset) - 1.0
            sin_theta = np.sqrt(1.0 - cos_theta*cos_theta)
            theta = np.arccos(cos_theta)            
            self.ss[j,:] = np.array([cos_phi*sin_theta, sin_phi*sin_theta, cos_theta])
            self.ns[j,:] = self.ss[j,:].copy()
            self.pp[j,:] = np.array([1, np.mod(phi,2*np.pi), np.pi/2 - theta])
            j += 1
    
        #Distances
        self._calc_distances()
    
    def purge_sample(self, tol=0.5):
        """
        Purge sample, ie. remove points close than a given threshold.
    
        Optional parameters:
            tol: distance to purge, ie. if dmin<tol*dmed then purge, float
    
        Update:
            ss, pp, N, _purge
        """
        if self.purged:
            verbose(VERB_SIMPLE,"Already purged.")
            return 0
        else:
            verbose(VERB_SIMPLE,"Purging sample")
    
        self.purged = True
        purge = True
        while purge:
            self._calc_distances()
            if self.dmin < tol*self.dmed:
                ipurge = np.argsort(self.ds)[0]
                self.ss = np.delete(self.ss,ipurge,0)
                self.ns = np.delete(self.ns,ipurge,0)
                self.pp = np.delete(self.pp,ipurge,0)
                self.N -= 1
                self.purged = True
                purge = True
            else:
                purge = False
    
    def update_normals(self,ss):
        """Update normal vectors according to geometry
        
        Parameters:
            ss: array (Nx3):
                Cartesian coordinates of points.
            
        Return:
            ns: array (Nx3):
                Normals to geometry.
        """
        if self.geometry==SAMPLER_GEOMETRY_CIRCLE:
            ns = np.array([[0,0,1]]*self.N)
        elif self.geometry==SAMPLER_GEOMETRY_SPHERE:
            ns = ss / np.linalg.norm(ss, axis=-1)[:, np.newaxis]
        return ns
