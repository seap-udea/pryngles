
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# Stand alone code of the module
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

class Const(object):
    #Astronomical constans
    Rsun=6.95510e8 # meters
    Msun=1.98e30 #kg
    Rsat=5.8232e7 # meters

    #Constants of nature
    au=1.496e11 #meters
    G=6.67e-11 # m^3/(kg*s^2)

    #Time
    hours=3600 # seconds
    days=24*hours # seconds
    yr=365.25*days # seconds

    #Numeric
    deg=mh.pi/180
    rad=1/deg

#Useful macros
RAD=Const.rad
DEG=Const.deg


class CanonicalUnits(object):
    def __init__(self,UL=0,UT=0,UM=0):
        if (UL==0)+(UT==0)+(UM==0)!=1:
            raise AssertionError("You should provide at least two units.")
        if (UL==0):
            self.UM=UM
            self.UT=UT
            self.UL=(Const.G*UM*UT)**(1./3)
        elif (UT==0):
            self.UM=UM
            self.UL=UL
            self.UT=(UL**3/(Const.G*UM))**0.5
        elif (UM==0):
            self.UL=UL
            self.UT=UT
            self.UM=(UL**3/(Const.G*UT))**0.5

        #Derived units
        self.UV=self.UL/self.UT #Velocity
        self.UA=self.UL/self.UT**2 #Velocity
        self.UP=self.UM*self.UV #Linear momentum
        self.UAM=self.UL*self.UP #Angular momentum
        self.UF=self.UM*self.UA #Force
        self.UE=self.UF*self.UA #Energy
        self.UN=1/self.UT #Angular frequency
